/* This file was generated by SableCC (http://www.sablecc.org/). */

package compilador.analysis;

import java.util.*;
import compilador.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPStart().apply(this);
        outStart(node);
    }

    public void inAStart(AStart node)
    {
        defaultIn(node);
    }

    public void outAStart(AStart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStart(AStart node)
    {
        inAStart(node);
        if(node.getProgramaStatement() != null)
        {
            node.getProgramaStatement().apply(this);
        }
        outAStart(node);
    }

    public void inAProgramaStatement(AProgramaStatement node)
    {
        defaultIn(node);
    }

    public void outAProgramaStatement(AProgramaStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProgramaStatement(AProgramaStatement node)
    {
        inAProgramaStatement(node);
        if(node.getPonto() != null)
        {
            node.getPonto().apply(this);
        }
        if(node.getFim() != null)
        {
            node.getFim().apply(this);
        }
        if(node.getComandos() != null)
        {
            node.getComandos().apply(this);
        }
        if(node.getInicio() != null)
        {
            node.getInicio().apply(this);
        }
        if(node.getDeclaracao() != null)
        {
            node.getDeclaracao().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getPrograma() != null)
        {
            node.getPrograma().apply(this);
        }
        outAProgramaStatement(node);
    }

    public void inADeclaracao(ADeclaracao node)
    {
        defaultIn(node);
    }

    public void outADeclaracao(ADeclaracao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclaracao(ADeclaracao node)
    {
        inADeclaracao(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getDoisPontos() != null)
        {
            node.getDoisPontos().apply(this);
        }
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        if(node.getDeclaracao() != null)
        {
            node.getDeclaracao().apply(this);
        }
        outADeclaracao(node);
    }

    public void inAIdVar(AIdVar node)
    {
        defaultIn(node);
    }

    public void outAIdVar(AIdVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdVar(AIdVar node)
    {
        inAIdVar(node);
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outAIdVar(node);
    }

    public void inAVarVar(AVarVar node)
    {
        defaultIn(node);
    }

    public void outAVarVar(AVarVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarVar(AVarVar node)
    {
        inAVarVar(node);
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        if(node.getVirgula() != null)
        {
            node.getVirgula().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outAVarVar(node);
    }

    public void inAEmptyVar(AEmptyVar node)
    {
        defaultIn(node);
    }

    public void outAEmptyVar(AEmptyVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmptyVar(AEmptyVar node)
    {
        inAEmptyVar(node);
        outAEmptyVar(node);
    }

    public void inAIdIdentificador(AIdIdentificador node)
    {
        defaultIn(node);
    }

    public void outAIdIdentificador(AIdIdentificador node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdIdentificador(AIdIdentificador node)
    {
        inAIdIdentificador(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIdIdentificador(node);
    }

    public void inAIdentificador(AIdentificador node)
    {
        defaultIn(node);
    }

    public void outAIdentificador(AIdentificador node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdentificador(AIdentificador node)
    {
        inAIdentificador(node);
        if(node.getIdVar() != null)
        {
            node.getIdVar().apply(this);
        }
        outAIdentificador(node);
    }

    public void inANumberValor(ANumberValor node)
    {
        defaultIn(node);
    }

    public void outANumberValor(ANumberValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumberValor(ANumberValor node)
    {
        inANumberValor(node);
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        outANumberValor(node);
    }

    public void inANumberRealValor(ANumberRealValor node)
    {
        defaultIn(node);
    }

    public void outANumberRealValor(ANumberRealValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumberRealValor(ANumberRealValor node)
    {
        inANumberRealValor(node);
        if(node.getNumberReal() != null)
        {
            node.getNumberReal().apply(this);
        }
        outANumberRealValor(node);
    }

    public void inAValor(AValor node)
    {
        defaultIn(node);
    }

    public void outAValor(AValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAValor(AValor node)
    {
        inAValor(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outAValor(node);
    }

    public void inAAtribuicaoComandos(AAtribuicaoComandos node)
    {
        defaultIn(node);
    }

    public void outAAtribuicaoComandos(AAtribuicaoComandos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAtribuicaoComandos(AAtribuicaoComandos node)
    {
        inAAtribuicaoComandos(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        if(node.getAtribuicao() != null)
        {
            node.getAtribuicao().apply(this);
        }
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        if(node.getComandos() != null)
        {
            node.getComandos().apply(this);
        }
        outAAtribuicaoComandos(node);
    }

    public void inASeComandos(ASeComandos node)
    {
        defaultIn(node);
    }

    public void outASeComandos(ASeComandos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASeComandos(ASeComandos node)
    {
        inASeComandos(node);
        if(node.getEntao() != null)
        {
            node.getEntao().apply(this);
        }
        if(node.getExpressaoLogica() != null)
        {
            node.getExpressaoLogica().apply(this);
        }
        if(node.getSe() != null)
        {
            node.getSe().apply(this);
        }
        if(node.getComandos() != null)
        {
            node.getComandos().apply(this);
        }
        outASeComandos(node);
    }

    public void inAEnquantoComandos(AEnquantoComandos node)
    {
        defaultIn(node);
    }

    public void outAEnquantoComandos(AEnquantoComandos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEnquantoComandos(AEnquantoComandos node)
    {
        inAEnquantoComandos(node);
        if(node.getFaca() != null)
        {
            node.getFaca().apply(this);
        }
        if(node.getEnquanto() != null)
        {
            node.getEnquanto().apply(this);
        }
        outAEnquantoComandos(node);
    }

    public void inAMaisExpressao(AMaisExpressao node)
    {
        defaultIn(node);
    }

    public void outAMaisExpressao(AMaisExpressao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaisExpressao(AMaisExpressao node)
    {
        inAMaisExpressao(node);
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        if(node.getMais() != null)
        {
            node.getMais().apply(this);
        }
        if(node.getExpressao() != null)
        {
            node.getExpressao().apply(this);
        }
        outAMaisExpressao(node);
    }

    public void inAMenosExpressao(AMenosExpressao node)
    {
        defaultIn(node);
    }

    public void outAMenosExpressao(AMenosExpressao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenosExpressao(AMenosExpressao node)
    {
        inAMenosExpressao(node);
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        if(node.getMenos() != null)
        {
            node.getMenos().apply(this);
        }
        if(node.getExpressao() != null)
        {
            node.getExpressao().apply(this);
        }
        outAMenosExpressao(node);
    }

    public void inATermoExpressao(ATermoExpressao node)
    {
        defaultIn(node);
    }

    public void outATermoExpressao(ATermoExpressao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermoExpressao(ATermoExpressao node)
    {
        inATermoExpressao(node);
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        outATermoExpressao(node);
    }

    public void inAMulTermo(AMulTermo node)
    {
        defaultIn(node);
    }

    public void outAMulTermo(AMulTermo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMulTermo(AMulTermo node)
    {
        inAMulTermo(node);
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        if(node.getEstrela() != null)
        {
            node.getEstrela().apply(this);
        }
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        outAMulTermo(node);
    }

    public void inADivTermo(ADivTermo node)
    {
        defaultIn(node);
    }

    public void outADivTermo(ADivTermo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivTermo(ADivTermo node)
    {
        inADivTermo(node);
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        if(node.getBarra() != null)
        {
            node.getBarra().apply(this);
        }
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        outADivTermo(node);
    }

    public void inAFatorTermo(AFatorTermo node)
    {
        defaultIn(node);
    }

    public void outAFatorTermo(AFatorTermo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFatorTermo(AFatorTermo node)
    {
        inAFatorTermo(node);
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        outAFatorTermo(node);
    }

    public void inAIdFator(AIdFator node)
    {
        defaultIn(node);
    }

    public void outAIdFator(AIdFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdFator(AIdFator node)
    {
        inAIdFator(node);
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        outAIdFator(node);
    }

    public void inAParenFator(AParenFator node)
    {
        defaultIn(node);
    }

    public void outAParenFator(AParenFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParenFator(AParenFator node)
    {
        inAParenFator(node);
        if(node.getParE() != null)
        {
            node.getParE().apply(this);
        }
        if(node.getExpressao() != null)
        {
            node.getExpressao().apply(this);
        }
        if(node.getParD() != null)
        {
            node.getParD().apply(this);
        }
        outAParenFator(node);
    }

    public void inAIgualExpressaoLogica(AIgualExpressaoLogica node)
    {
        defaultIn(node);
    }

    public void outAIgualExpressaoLogica(AIgualExpressaoLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIgualExpressaoLogica(AIgualExpressaoLogica node)
    {
        inAIgualExpressaoLogica(node);
        if(node.getTermoLogico() != null)
        {
            node.getTermoLogico().apply(this);
        }
        if(node.getIgual() != null)
        {
            node.getIgual().apply(this);
        }
        if(node.getExpressaoLogica() != null)
        {
            node.getExpressaoLogica().apply(this);
        }
        outAIgualExpressaoLogica(node);
    }

    public void inADiferenteExpressaoLogica(ADiferenteExpressaoLogica node)
    {
        defaultIn(node);
    }

    public void outADiferenteExpressaoLogica(ADiferenteExpressaoLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADiferenteExpressaoLogica(ADiferenteExpressaoLogica node)
    {
        inADiferenteExpressaoLogica(node);
        if(node.getTermoLogico() != null)
        {
            node.getTermoLogico().apply(this);
        }
        if(node.getDiferente() != null)
        {
            node.getDiferente().apply(this);
        }
        if(node.getExpressaoLogica() != null)
        {
            node.getExpressaoLogica().apply(this);
        }
        outADiferenteExpressaoLogica(node);
    }

    public void inAMenorExpressaoLogica(AMenorExpressaoLogica node)
    {
        defaultIn(node);
    }

    public void outAMenorExpressaoLogica(AMenorExpressaoLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenorExpressaoLogica(AMenorExpressaoLogica node)
    {
        inAMenorExpressaoLogica(node);
        if(node.getTermoLogico() != null)
        {
            node.getTermoLogico().apply(this);
        }
        if(node.getMenor() != null)
        {
            node.getMenor().apply(this);
        }
        if(node.getExpressaoLogica() != null)
        {
            node.getExpressaoLogica().apply(this);
        }
        outAMenorExpressaoLogica(node);
    }

    public void inAMaiorExpressaoLogica(AMaiorExpressaoLogica node)
    {
        defaultIn(node);
    }

    public void outAMaiorExpressaoLogica(AMaiorExpressaoLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaiorExpressaoLogica(AMaiorExpressaoLogica node)
    {
        inAMaiorExpressaoLogica(node);
        if(node.getTermoLogico() != null)
        {
            node.getTermoLogico().apply(this);
        }
        if(node.getMaior() != null)
        {
            node.getMaior().apply(this);
        }
        if(node.getExpressaoLogica() != null)
        {
            node.getExpressaoLogica().apply(this);
        }
        outAMaiorExpressaoLogica(node);
    }

    public void inAMenorIgualExpressaoLogica(AMenorIgualExpressaoLogica node)
    {
        defaultIn(node);
    }

    public void outAMenorIgualExpressaoLogica(AMenorIgualExpressaoLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenorIgualExpressaoLogica(AMenorIgualExpressaoLogica node)
    {
        inAMenorIgualExpressaoLogica(node);
        if(node.getTermoLogico() != null)
        {
            node.getTermoLogico().apply(this);
        }
        if(node.getMenorIgual() != null)
        {
            node.getMenorIgual().apply(this);
        }
        if(node.getExpressaoLogica() != null)
        {
            node.getExpressaoLogica().apply(this);
        }
        outAMenorIgualExpressaoLogica(node);
    }

    public void inAMaiorIgualExpressaoLogica(AMaiorIgualExpressaoLogica node)
    {
        defaultIn(node);
    }

    public void outAMaiorIgualExpressaoLogica(AMaiorIgualExpressaoLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaiorIgualExpressaoLogica(AMaiorIgualExpressaoLogica node)
    {
        inAMaiorIgualExpressaoLogica(node);
        if(node.getTermoLogico() != null)
        {
            node.getTermoLogico().apply(this);
        }
        if(node.getMaiorIgual() != null)
        {
            node.getMaiorIgual().apply(this);
        }
        if(node.getExpressaoLogica() != null)
        {
            node.getExpressaoLogica().apply(this);
        }
        outAMaiorIgualExpressaoLogica(node);
    }

    public void inATermoLogicoExpressaoLogica(ATermoLogicoExpressaoLogica node)
    {
        defaultIn(node);
    }

    public void outATermoLogicoExpressaoLogica(ATermoLogicoExpressaoLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermoLogicoExpressaoLogica(ATermoLogicoExpressaoLogica node)
    {
        inATermoLogicoExpressaoLogica(node);
        if(node.getTermoLogico() != null)
        {
            node.getTermoLogico().apply(this);
        }
        outATermoLogicoExpressaoLogica(node);
    }

    public void inAETermoLogico(AETermoLogico node)
    {
        defaultIn(node);
    }

    public void outAETermoLogico(AETermoLogico node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAETermoLogico(AETermoLogico node)
    {
        inAETermoLogico(node);
        if(node.getFatorLogico() != null)
        {
            node.getFatorLogico().apply(this);
        }
        if(node.getE() != null)
        {
            node.getE().apply(this);
        }
        if(node.getTermoLogico() != null)
        {
            node.getTermoLogico().apply(this);
        }
        outAETermoLogico(node);
    }

    public void inAOuTermoLogico(AOuTermoLogico node)
    {
        defaultIn(node);
    }

    public void outAOuTermoLogico(AOuTermoLogico node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOuTermoLogico(AOuTermoLogico node)
    {
        inAOuTermoLogico(node);
        if(node.getFatorLogico() != null)
        {
            node.getFatorLogico().apply(this);
        }
        if(node.getOu() != null)
        {
            node.getOu().apply(this);
        }
        if(node.getTermoLogico() != null)
        {
            node.getTermoLogico().apply(this);
        }
        outAOuTermoLogico(node);
    }

    public void inAXorTermoLogico(AXorTermoLogico node)
    {
        defaultIn(node);
    }

    public void outAXorTermoLogico(AXorTermoLogico node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAXorTermoLogico(AXorTermoLogico node)
    {
        inAXorTermoLogico(node);
        if(node.getFatorLogico() != null)
        {
            node.getFatorLogico().apply(this);
        }
        if(node.getXor() != null)
        {
            node.getXor().apply(this);
        }
        if(node.getTermoLogico() != null)
        {
            node.getTermoLogico().apply(this);
        }
        outAXorTermoLogico(node);
    }

    public void inAFatorLogicoTermoLogico(AFatorLogicoTermoLogico node)
    {
        defaultIn(node);
    }

    public void outAFatorLogicoTermoLogico(AFatorLogicoTermoLogico node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFatorLogicoTermoLogico(AFatorLogicoTermoLogico node)
    {
        inAFatorLogicoTermoLogico(node);
        if(node.getFatorLogico() != null)
        {
            node.getFatorLogico().apply(this);
        }
        outAFatorLogicoTermoLogico(node);
    }

    public void inAIdFatorLogico(AIdFatorLogico node)
    {
        defaultIn(node);
    }

    public void outAIdFatorLogico(AIdFatorLogico node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdFatorLogico(AIdFatorLogico node)
    {
        inAIdFatorLogico(node);
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        outAIdFatorLogico(node);
    }

    public void inAParentesesFatorLogico(AParentesesFatorLogico node)
    {
        defaultIn(node);
    }

    public void outAParentesesFatorLogico(AParentesesFatorLogico node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParentesesFatorLogico(AParentesesFatorLogico node)
    {
        inAParentesesFatorLogico(node);
        if(node.getParE() != null)
        {
            node.getParE().apply(this);
        }
        if(node.getExpressaoLogica() != null)
        {
            node.getExpressaoLogica().apply(this);
        }
        if(node.getParD() != null)
        {
            node.getParD().apply(this);
        }
        outAParentesesFatorLogico(node);
    }
}
