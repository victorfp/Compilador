/* This file was generated by SableCC (http://www.sablecc.org/). */

package compilador.node;

import compilador.analysis.*;

@SuppressWarnings("nls")
public final class AIdVarIdentificador extends PIdentificador
{
    private TId _id_;
    private TColD _colD_;
    private TNumber _number_;
    private TColE _colE_;

    public AIdVarIdentificador()
    {
        // Constructor
    }

    public AIdVarIdentificador(
        @SuppressWarnings("hiding") TId _id_,
        @SuppressWarnings("hiding") TColD _colD_,
        @SuppressWarnings("hiding") TNumber _number_,
        @SuppressWarnings("hiding") TColE _colE_)
    {
        // Constructor
        setId(_id_);

        setColD(_colD_);

        setNumber(_number_);

        setColE(_colE_);

    }

    @Override
    public Object clone()
    {
        return new AIdVarIdentificador(
            cloneNode(this._id_),
            cloneNode(this._colD_),
            cloneNode(this._number_),
            cloneNode(this._colE_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAIdVarIdentificador(this);
    }

    public TId getId()
    {
        return this._id_;
    }

    public void setId(TId node)
    {
        if(this._id_ != null)
        {
            this._id_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._id_ = node;
    }

    public TColD getColD()
    {
        return this._colD_;
    }

    public void setColD(TColD node)
    {
        if(this._colD_ != null)
        {
            this._colD_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._colD_ = node;
    }

    public TNumber getNumber()
    {
        return this._number_;
    }

    public void setNumber(TNumber node)
    {
        if(this._number_ != null)
        {
            this._number_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._number_ = node;
    }

    public TColE getColE()
    {
        return this._colE_;
    }

    public void setColE(TColE node)
    {
        if(this._colE_ != null)
        {
            this._colE_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._colE_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._id_)
            + toString(this._colD_)
            + toString(this._number_)
            + toString(this._colE_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._id_ == child)
        {
            this._id_ = null;
            return;
        }

        if(this._colD_ == child)
        {
            this._colD_ = null;
            return;
        }

        if(this._number_ == child)
        {
            this._number_ = null;
            return;
        }

        if(this._colE_ == child)
        {
            this._colE_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._id_ == oldChild)
        {
            setId((TId) newChild);
            return;
        }

        if(this._colD_ == oldChild)
        {
            setColD((TColD) newChild);
            return;
        }

        if(this._number_ == oldChild)
        {
            setNumber((TNumber) newChild);
            return;
        }

        if(this._colE_ == oldChild)
        {
            setColE((TColE) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
