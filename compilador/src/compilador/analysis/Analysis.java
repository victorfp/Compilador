/* This file was generated by SableCC (http://www.sablecc.org/). */

package compilador.analysis;

import compilador.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAStart(AStart node);
    void caseAIdIdentificador(AIdIdentificador node);
    void caseAIdVarIdentificador(AIdVarIdentificador node);
    void caseAIdVar(AIdVar node);
    void caseATailVarTail(ATailVarTail node);
    void caseAEmptyVarTail(AEmptyVarTail node);
    void caseAStringValor(AStringValor node);
    void caseANumberValor(ANumberValor node);
    void caseANumberRealValor(ANumberRealValor node);
    void caseADeclarDeclaracao(ADeclarDeclaracao node);
    void caseAMaisExpressao(AMaisExpressao node);
    void caseAMenosExpressao(AMenosExpressao node);
    void caseAMulExpressao(AMulExpressao node);
    void caseADivExpressao(ADivExpressao node);
    void caseANegacaoExpressao(ANegacaoExpressao node);
    void caseAValorExpressao(AValorExpressao node);
    void caseAIdExpressao(AIdExpressao node);
    void caseAParentesesExpressao(AParentesesExpressao node);
    void caseAEExpressaoLogica(AEExpressaoLogica node);
    void caseAOuExpressaoLogica(AOuExpressaoLogica node);
    void caseAXorExpressaoLogica(AXorExpressaoLogica node);
    void caseANaoExpressaoLogica(ANaoExpressaoLogica node);
    void caseARelacionalExpressaoLogica(ARelacionalExpressaoLogica node);
    void caseAParentesesExpressaoLogica(AParentesesExpressaoLogica node);
    void caseAOperacaoExpressaoLogica(AOperacaoExpressaoLogica node);
    void caseAIgualOpRel(AIgualOpRel node);
    void caseADiferenteOpRel(ADiferenteOpRel node);
    void caseAMaiorOpRel(AMaiorOpRel node);
    void caseAMenorOpRel(AMenorOpRel node);
    void caseAMaiorIgualOpRel(AMaiorIgualOpRel node);
    void caseAMenorIgualOpRel(AMenorIgualOpRel node);
    void caseAExpExp(AExpExp node);
    void caseATailExpTail(ATailExpTail node);
    void caseAEmptyExpTail(AEmptyExpTail node);
    void caseAAtribuicaoComando(AAtribuicaoComando node);
    void caseAEscrevaComando(AEscrevaComando node);
    void caseALeiaComando(ALeiaComando node);
    void caseAAvalieComando(AAvalieComando node);
    void caseAParaComando(AParaComando node);
    void caseAParaPassoComando(AParaPassoComando node);
    void caseASeComando(ASeComando node);
    void caseARepitaComando(ARepitaComando node);
    void caseAEnquantoComando(AEnquantoComando node);

    void caseTPrograma(TPrograma node);
    void caseTInicio(TInicio node);
    void caseTFim(TFim node);
    void caseTEnquanto(TEnquanto node);
    void caseTFimEnquanto(TFimEnquanto node);
    void caseTSe(TSe node);
    void caseTEntao(TEntao node);
    void caseTSenao(TSenao node);
    void caseTFimSe(TFimSe node);
    void caseTPara(TPara node);
    void caseTDe(TDe node);
    void caseTPasso(TPasso node);
    void caseTFimPara(TFimPara node);
    void caseTAte(TAte node);
    void caseTFaca(TFaca node);
    void caseTRepita(TRepita node);
    void caseTAvalie(TAvalie node);
    void caseTCaso(TCaso node);
    void caseTFimAvalie(TFimAvalie node);
    void caseTTipo(TTipo node);
    void caseTMais(TMais node);
    void caseTMenos(TMenos node);
    void caseTBarra(TBarra node);
    void caseTEstrela(TEstrela node);
    void caseTParD(TParD node);
    void caseTParE(TParE node);
    void caseTColD(TColD node);
    void caseTColE(TColE node);
    void caseTIgual(TIgual node);
    void caseTDiferente(TDiferente node);
    void caseTMaior(TMaior node);
    void caseTMenor(TMenor node);
    void caseTMenorIgual(TMenorIgual node);
    void caseTMaiorIgual(TMaiorIgual node);
    void caseTE(TE node);
    void caseTOu(TOu node);
    void caseTXor(TXor node);
    void caseTNao(TNao node);
    void caseTAtribuicao(TAtribuicao node);
    void caseTEscreva(TEscreva node);
    void caseTLeia(TLeia node);
    void caseTDoisPontos(TDoisPontos node);
    void caseTSemicolon(TSemicolon node);
    void caseTPonto(TPonto node);
    void caseTVirgula(TVirgula node);
    void caseTComments(TComments node);
    void caseTId(TId node);
    void caseTNumber(TNumber node);
    void caseTNumberReal(TNumberReal node);
    void caseTString(TString node);
    void caseTBlank(TBlank node);
    void caseTComment(TComment node);
    void caseTCommentEnd(TCommentEnd node);
    void caseTCommentBody(TCommentBody node);
    void caseTStar(TStar node);
    void caseTSlash(TSlash node);
    void caseTCommentLine(TCommentLine node);
    void caseEOF(EOF node);
    void caseInvalidToken(InvalidToken node);
}
