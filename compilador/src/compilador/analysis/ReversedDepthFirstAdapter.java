/* This file was generated by SableCC (http://www.sablecc.org/). */

package compilador.analysis;

import java.util.*;
import compilador.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPStart().apply(this);
        outStart(node);
    }

    public void inAStart(AStart node)
    {
        defaultIn(node);
    }

    public void outAStart(AStart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStart(AStart node)
    {
        inAStart(node);
        if(node.getFim() != null)
        {
            node.getFim().apply(this);
        }
        {
            List<PComando> copy = new ArrayList<PComando>(node.getComando());
            Collections.reverse(copy);
            for(PComando e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PDeclaracao> copy = new ArrayList<PDeclaracao>(node.getDeclaracao());
            Collections.reverse(copy);
            for(PDeclaracao e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getInicio() != null)
        {
            node.getInicio().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getPrograma() != null)
        {
            node.getPrograma().apply(this);
        }
        outAStart(node);
    }

    public void inAIdIdentificador(AIdIdentificador node)
    {
        defaultIn(node);
    }

    public void outAIdIdentificador(AIdIdentificador node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdIdentificador(AIdIdentificador node)
    {
        inAIdIdentificador(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIdIdentificador(node);
    }

    public void inAIdVarIdentificador(AIdVarIdentificador node)
    {
        defaultIn(node);
    }

    public void outAIdVarIdentificador(AIdVarIdentificador node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdVarIdentificador(AIdVarIdentificador node)
    {
        inAIdVarIdentificador(node);
        if(node.getColE() != null)
        {
            node.getColE().apply(this);
        }
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        if(node.getColD() != null)
        {
            node.getColD().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIdVarIdentificador(node);
    }

    public void inAIdVar(AIdVar node)
    {
        defaultIn(node);
    }

    public void outAIdVar(AIdVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdVar(AIdVar node)
    {
        inAIdVar(node);
        if(node.getVarTail() != null)
        {
            node.getVarTail().apply(this);
        }
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        outAIdVar(node);
    }

    public void inATailVarTail(ATailVarTail node)
    {
        defaultIn(node);
    }

    public void outATailVarTail(ATailVarTail node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATailVarTail(ATailVarTail node)
    {
        inATailVarTail(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getVirgula() != null)
        {
            node.getVirgula().apply(this);
        }
        outATailVarTail(node);
    }

    public void inAEmptyVarTail(AEmptyVarTail node)
    {
        defaultIn(node);
    }

    public void outAEmptyVarTail(AEmptyVarTail node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmptyVarTail(AEmptyVarTail node)
    {
        inAEmptyVarTail(node);
        outAEmptyVarTail(node);
    }

    public void inAStringValor(AStringValor node)
    {
        defaultIn(node);
    }

    public void outAStringValor(AStringValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringValor(AStringValor node)
    {
        inAStringValor(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outAStringValor(node);
    }

    public void inANumberValor(ANumberValor node)
    {
        defaultIn(node);
    }

    public void outANumberValor(ANumberValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumberValor(ANumberValor node)
    {
        inANumberValor(node);
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        outANumberValor(node);
    }

    public void inANumberRealValor(ANumberRealValor node)
    {
        defaultIn(node);
    }

    public void outANumberRealValor(ANumberRealValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumberRealValor(ANumberRealValor node)
    {
        inANumberRealValor(node);
        if(node.getNumberReal() != null)
        {
            node.getNumberReal().apply(this);
        }
        outANumberRealValor(node);
    }

    public void inADeclarDeclaracao(ADeclarDeclaracao node)
    {
        defaultIn(node);
    }

    public void outADeclarDeclaracao(ADeclarDeclaracao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclarDeclaracao(ADeclarDeclaracao node)
    {
        inADeclarDeclaracao(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getDoisPontos() != null)
        {
            node.getDoisPontos().apply(this);
        }
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        outADeclarDeclaracao(node);
    }

    public void inAMaisExpressao(AMaisExpressao node)
    {
        defaultIn(node);
    }

    public void outAMaisExpressao(AMaisExpressao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaisExpressao(AMaisExpressao node)
    {
        inAMaisExpressao(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outAMaisExpressao(node);
    }

    public void inAMenosExpressao(AMenosExpressao node)
    {
        defaultIn(node);
    }

    public void outAMenosExpressao(AMenosExpressao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenosExpressao(AMenosExpressao node)
    {
        inAMenosExpressao(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outAMenosExpressao(node);
    }

    public void inAMulExpressao(AMulExpressao node)
    {
        defaultIn(node);
    }

    public void outAMulExpressao(AMulExpressao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMulExpressao(AMulExpressao node)
    {
        inAMulExpressao(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outAMulExpressao(node);
    }

    public void inADivExpressao(ADivExpressao node)
    {
        defaultIn(node);
    }

    public void outADivExpressao(ADivExpressao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivExpressao(ADivExpressao node)
    {
        inADivExpressao(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outADivExpressao(node);
    }

    public void inANegacaoExpressao(ANegacaoExpressao node)
    {
        defaultIn(node);
    }

    public void outANegacaoExpressao(ANegacaoExpressao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANegacaoExpressao(ANegacaoExpressao node)
    {
        inANegacaoExpressao(node);
        if(node.getExpressao() != null)
        {
            node.getExpressao().apply(this);
        }
        outANegacaoExpressao(node);
    }

    public void inAValorExpressao(AValorExpressao node)
    {
        defaultIn(node);
    }

    public void outAValorExpressao(AValorExpressao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAValorExpressao(AValorExpressao node)
    {
        inAValorExpressao(node);
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        outAValorExpressao(node);
    }

    public void inAIdExpressao(AIdExpressao node)
    {
        defaultIn(node);
    }

    public void outAIdExpressao(AIdExpressao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdExpressao(AIdExpressao node)
    {
        inAIdExpressao(node);
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        outAIdExpressao(node);
    }

    public void inAParentesesExpressao(AParentesesExpressao node)
    {
        defaultIn(node);
    }

    public void outAParentesesExpressao(AParentesesExpressao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParentesesExpressao(AParentesesExpressao node)
    {
        inAParentesesExpressao(node);
        if(node.getExpressao() != null)
        {
            node.getExpressao().apply(this);
        }
        outAParentesesExpressao(node);
    }

    public void inAEExpressaoLogica(AEExpressaoLogica node)
    {
        defaultIn(node);
    }

    public void outAEExpressaoLogica(AEExpressaoLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEExpressaoLogica(AEExpressaoLogica node)
    {
        inAEExpressaoLogica(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outAEExpressaoLogica(node);
    }

    public void inAOuExpressaoLogica(AOuExpressaoLogica node)
    {
        defaultIn(node);
    }

    public void outAOuExpressaoLogica(AOuExpressaoLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOuExpressaoLogica(AOuExpressaoLogica node)
    {
        inAOuExpressaoLogica(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outAOuExpressaoLogica(node);
    }

    public void inAXorExpressaoLogica(AXorExpressaoLogica node)
    {
        defaultIn(node);
    }

    public void outAXorExpressaoLogica(AXorExpressaoLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAXorExpressaoLogica(AXorExpressaoLogica node)
    {
        inAXorExpressaoLogica(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outAXorExpressaoLogica(node);
    }

    public void inANaoExpressaoLogica(ANaoExpressaoLogica node)
    {
        defaultIn(node);
    }

    public void outANaoExpressaoLogica(ANaoExpressaoLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANaoExpressaoLogica(ANaoExpressaoLogica node)
    {
        inANaoExpressaoLogica(node);
        if(node.getExpressaoLogica() != null)
        {
            node.getExpressaoLogica().apply(this);
        }
        outANaoExpressaoLogica(node);
    }

    public void inARelacionalExpressaoLogica(ARelacionalExpressaoLogica node)
    {
        defaultIn(node);
    }

    public void outARelacionalExpressaoLogica(ARelacionalExpressaoLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARelacionalExpressaoLogica(ARelacionalExpressaoLogica node)
    {
        inARelacionalExpressaoLogica(node);
        if(node.getExpressaoLogica() != null)
        {
            node.getExpressaoLogica().apply(this);
        }
        if(node.getOpRel() != null)
        {
            node.getOpRel().apply(this);
        }
        if(node.getExpressao() != null)
        {
            node.getExpressao().apply(this);
        }
        outARelacionalExpressaoLogica(node);
    }

    public void inAParentesesExpressaoLogica(AParentesesExpressaoLogica node)
    {
        defaultIn(node);
    }

    public void outAParentesesExpressaoLogica(AParentesesExpressaoLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParentesesExpressaoLogica(AParentesesExpressaoLogica node)
    {
        inAParentesesExpressaoLogica(node);
        if(node.getExpressaoLogica() != null)
        {
            node.getExpressaoLogica().apply(this);
        }
        outAParentesesExpressaoLogica(node);
    }

    public void inAOperacaoExpressaoLogica(AOperacaoExpressaoLogica node)
    {
        defaultIn(node);
    }

    public void outAOperacaoExpressaoLogica(AOperacaoExpressaoLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOperacaoExpressaoLogica(AOperacaoExpressaoLogica node)
    {
        inAOperacaoExpressaoLogica(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getOpRel() != null)
        {
            node.getOpRel().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outAOperacaoExpressaoLogica(node);
    }

    public void inAIgualOpRel(AIgualOpRel node)
    {
        defaultIn(node);
    }

    public void outAIgualOpRel(AIgualOpRel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIgualOpRel(AIgualOpRel node)
    {
        inAIgualOpRel(node);
        if(node.getIgual() != null)
        {
            node.getIgual().apply(this);
        }
        outAIgualOpRel(node);
    }

    public void inADiferenteOpRel(ADiferenteOpRel node)
    {
        defaultIn(node);
    }

    public void outADiferenteOpRel(ADiferenteOpRel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADiferenteOpRel(ADiferenteOpRel node)
    {
        inADiferenteOpRel(node);
        if(node.getDiferente() != null)
        {
            node.getDiferente().apply(this);
        }
        outADiferenteOpRel(node);
    }

    public void inAMaiorOpRel(AMaiorOpRel node)
    {
        defaultIn(node);
    }

    public void outAMaiorOpRel(AMaiorOpRel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaiorOpRel(AMaiorOpRel node)
    {
        inAMaiorOpRel(node);
        if(node.getMaior() != null)
        {
            node.getMaior().apply(this);
        }
        outAMaiorOpRel(node);
    }

    public void inAMenorOpRel(AMenorOpRel node)
    {
        defaultIn(node);
    }

    public void outAMenorOpRel(AMenorOpRel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenorOpRel(AMenorOpRel node)
    {
        inAMenorOpRel(node);
        if(node.getMenor() != null)
        {
            node.getMenor().apply(this);
        }
        outAMenorOpRel(node);
    }

    public void inAMaiorIgualOpRel(AMaiorIgualOpRel node)
    {
        defaultIn(node);
    }

    public void outAMaiorIgualOpRel(AMaiorIgualOpRel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaiorIgualOpRel(AMaiorIgualOpRel node)
    {
        inAMaiorIgualOpRel(node);
        if(node.getMaiorIgual() != null)
        {
            node.getMaiorIgual().apply(this);
        }
        outAMaiorIgualOpRel(node);
    }

    public void inAMenorIgualOpRel(AMenorIgualOpRel node)
    {
        defaultIn(node);
    }

    public void outAMenorIgualOpRel(AMenorIgualOpRel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenorIgualOpRel(AMenorIgualOpRel node)
    {
        inAMenorIgualOpRel(node);
        if(node.getMenorIgual() != null)
        {
            node.getMenorIgual().apply(this);
        }
        outAMenorIgualOpRel(node);
    }

    public void inAExpExp(AExpExp node)
    {
        defaultIn(node);
    }

    public void outAExpExp(AExpExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpExp(AExpExp node)
    {
        inAExpExp(node);
        if(node.getExpTail() != null)
        {
            node.getExpTail().apply(this);
        }
        if(node.getExpressao() != null)
        {
            node.getExpressao().apply(this);
        }
        outAExpExp(node);
    }

    public void inATailExpTail(ATailExpTail node)
    {
        defaultIn(node);
    }

    public void outATailExpTail(ATailExpTail node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATailExpTail(ATailExpTail node)
    {
        inATailExpTail(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getVirgula() != null)
        {
            node.getVirgula().apply(this);
        }
        outATailExpTail(node);
    }

    public void inAEmptyExpTail(AEmptyExpTail node)
    {
        defaultIn(node);
    }

    public void outAEmptyExpTail(AEmptyExpTail node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmptyExpTail(AEmptyExpTail node)
    {
        inAEmptyExpTail(node);
        outAEmptyExpTail(node);
    }

    public void inAAtribuicaoComando(AAtribuicaoComando node)
    {
        defaultIn(node);
    }

    public void outAAtribuicaoComando(AAtribuicaoComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAtribuicaoComando(AAtribuicaoComando node)
    {
        inAAtribuicaoComando(node);
        if(node.getExpressao() != null)
        {
            node.getExpressao().apply(this);
        }
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        outAAtribuicaoComando(node);
    }

    public void inAEscrevaComando(AEscrevaComando node)
    {
        defaultIn(node);
    }

    public void outAEscrevaComando(AEscrevaComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEscrevaComando(AEscrevaComando node)
    {
        inAEscrevaComando(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAEscrevaComando(node);
    }

    public void inALeiaComando(ALeiaComando node)
    {
        defaultIn(node);
    }

    public void outALeiaComando(ALeiaComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALeiaComando(ALeiaComando node)
    {
        inALeiaComando(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outALeiaComando(node);
    }

    public void inAAvalieComando(AAvalieComando node)
    {
        defaultIn(node);
    }

    public void outAAvalieComando(AAvalieComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAvalieComando(AAvalieComando node)
    {
        inAAvalieComando(node);
        if(node.getExpressao() != null)
        {
            node.getExpressao().apply(this);
        }
        outAAvalieComando(node);
    }

    public void inAParaComando(AParaComando node)
    {
        defaultIn(node);
    }

    public void outAParaComando(AParaComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParaComando(AParaComando node)
    {
        inAParaComando(node);
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        outAParaComando(node);
    }

    public void inAParaPassoComando(AParaPassoComando node)
    {
        defaultIn(node);
    }

    public void outAParaPassoComando(AParaPassoComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParaPassoComando(AParaPassoComando node)
    {
        inAParaPassoComando(node);
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        outAParaPassoComando(node);
    }

    public void inASeComando(ASeComando node)
    {
        defaultIn(node);
    }

    public void outASeComando(ASeComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASeComando(ASeComando node)
    {
        inASeComando(node);
        if(node.getExpressaoLogica() != null)
        {
            node.getExpressaoLogica().apply(this);
        }
        outASeComando(node);
    }

    public void inARepitaComando(ARepitaComando node)
    {
        defaultIn(node);
    }

    public void outARepitaComando(ARepitaComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARepitaComando(ARepitaComando node)
    {
        inARepitaComando(node);
        if(node.getExpressaoLogica() != null)
        {
            node.getExpressaoLogica().apply(this);
        }
        outARepitaComando(node);
    }

    public void inAEnquantoComando(AEnquantoComando node)
    {
        defaultIn(node);
    }

    public void outAEnquantoComando(AEnquantoComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEnquantoComando(AEnquantoComando node)
    {
        inAEnquantoComando(node);
        if(node.getExpressaoLogica() != null)
        {
            node.getExpressaoLogica().apply(this);
        }
        outAEnquantoComando(node);
    }
}
