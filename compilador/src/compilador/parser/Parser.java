/* This file was generated by SableCC (http://www.sablecc.org/). */

package compilador.parser;

import compilador.lexer.*;
import compilador.node.*;
import compilador.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    @SuppressWarnings({"unchecked","unused"})
    private void push(int numstate, ArrayList<Object> listNode) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PStart node1 = (PStart) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AAstart1Start */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list);
            }
            break;
            case 1: /* reduce AAstart2Start */
            {
                ArrayList<Object> list = new1();
                push(goTo(0), list);
            }
            break;
            case 2: /* reduce AAstart3Start */
            {
                ArrayList<Object> list = new2();
                push(goTo(0), list);
            }
            break;
            case 3: /* reduce AAstart4Start */
            {
                ArrayList<Object> list = new3();
                push(goTo(0), list);
            }
            break;
            case 4: /* reduce AIdIdentificador */
            {
                ArrayList<Object> list = new4();
                push(goTo(1), list);
            }
            break;
            case 5: /* reduce AIdVarIdentificador */
            {
                ArrayList<Object> list = new5();
                push(goTo(1), list);
            }
            break;
            case 6: /* reduce AIdVar */
            {
                ArrayList<Object> list = new6();
                push(goTo(2), list);
            }
            break;
            case 7: /* reduce ATailVarTail */
            {
                ArrayList<Object> list = new7();
                push(goTo(3), list);
            }
            break;
            case 8: /* reduce AEmptyVarTail */
            {
                ArrayList<Object> list = new8();
                push(goTo(3), list);
            }
            break;
            case 9: /* reduce AStringValor */
            {
                ArrayList<Object> list = new9();
                push(goTo(4), list);
            }
            break;
            case 10: /* reduce ANumberValor */
            {
                ArrayList<Object> list = new10();
                push(goTo(4), list);
            }
            break;
            case 11: /* reduce ANumberRealValor */
            {
                ArrayList<Object> list = new11();
                push(goTo(4), list);
            }
            break;
            case 12: /* reduce ADeclarDeclaracao */
            {
                ArrayList<Object> list = new12();
                push(goTo(5), list);
            }
            break;
            case 13: /* reduce AMaisExpressao */
            {
                ArrayList<Object> list = new13();
                push(goTo(6), list);
            }
            break;
            case 14: /* reduce AMenosExpressao */
            {
                ArrayList<Object> list = new14();
                push(goTo(6), list);
            }
            break;
            case 15: /* reduce ANegacaoExpressao */
            {
                ArrayList<Object> list = new15();
                push(goTo(6), list);
            }
            break;
            case 16: /* reduce ATermoExpressao */
            {
                ArrayList<Object> list = new16();
                push(goTo(6), list);
            }
            break;
            case 17: /* reduce AMulTermo */
            {
                ArrayList<Object> list = new17();
                push(goTo(7), list);
            }
            break;
            case 18: /* reduce ADivTermo */
            {
                ArrayList<Object> list = new18();
                push(goTo(7), list);
            }
            break;
            case 19: /* reduce AFatorTermo */
            {
                ArrayList<Object> list = new19();
                push(goTo(7), list);
            }
            break;
            case 20: /* reduce AValorFator */
            {
                ArrayList<Object> list = new20();
                push(goTo(8), list);
            }
            break;
            case 21: /* reduce AIdFator */
            {
                ArrayList<Object> list = new21();
                push(goTo(8), list);
            }
            break;
            case 22: /* reduce AParentesesFator */
            {
                ArrayList<Object> list = new22();
                push(goTo(8), list);
            }
            break;
            case 23: /* reduce ALogicaExpressaoLogica */
            {
                ArrayList<Object> list = new23();
                push(goTo(9), list);
            }
            break;
            case 24: /* reduce ANegacaoExpressaoLogica */
            {
                ArrayList<Object> list = new24();
                push(goTo(9), list);
            }
            break;
            case 25: /* reduce ATermoExpressaoLogica */
            {
                ArrayList<Object> list = new25();
                push(goTo(9), list);
            }
            break;
            case 26: /* reduce ARelacionalTermoLogico */
            {
                ArrayList<Object> list = new26();
                push(goTo(10), list);
            }
            break;
            case 27: /* reduce AOperacaoTermoLogico */
            {
                ArrayList<Object> list = new27();
                push(goTo(10), list);
            }
            break;
            case 28: /* reduce AParentesesFatorLogico */
            {
                ArrayList<Object> list = new28();
                push(goTo(11), list);
            }
            break;
            case 29: /* reduce AIgualOpRel */
            {
                ArrayList<Object> list = new29();
                push(goTo(12), list);
            }
            break;
            case 30: /* reduce ADiferenteOpRel */
            {
                ArrayList<Object> list = new30();
                push(goTo(12), list);
            }
            break;
            case 31: /* reduce AMaiorOpRel */
            {
                ArrayList<Object> list = new31();
                push(goTo(12), list);
            }
            break;
            case 32: /* reduce AMenorOpRel */
            {
                ArrayList<Object> list = new32();
                push(goTo(12), list);
            }
            break;
            case 33: /* reduce AMaiorIgualOpRel */
            {
                ArrayList<Object> list = new33();
                push(goTo(12), list);
            }
            break;
            case 34: /* reduce AMenorIgualOpRel */
            {
                ArrayList<Object> list = new34();
                push(goTo(12), list);
            }
            break;
            case 35: /* reduce AEOpLog */
            {
                ArrayList<Object> list = new35();
                push(goTo(13), list);
            }
            break;
            case 36: /* reduce AOuOpLog */
            {
                ArrayList<Object> list = new36();
                push(goTo(13), list);
            }
            break;
            case 37: /* reduce AXorOpLog */
            {
                ArrayList<Object> list = new37();
                push(goTo(13), list);
            }
            break;
            case 38: /* reduce AExpExp */
            {
                ArrayList<Object> list = new38();
                push(goTo(14), list);
            }
            break;
            case 39: /* reduce ATailExpTail */
            {
                ArrayList<Object> list = new39();
                push(goTo(15), list);
            }
            break;
            case 40: /* reduce AEmptyExpTail */
            {
                ArrayList<Object> list = new40();
                push(goTo(15), list);
            }
            break;
            case 41: /* reduce AAtribuicaoComando */
            {
                ArrayList<Object> list = new41();
                push(goTo(16), list);
            }
            break;
            case 42: /* reduce AEscrevaComando */
            {
                ArrayList<Object> list = new42();
                push(goTo(16), list);
            }
            break;
            case 43: /* reduce ALeiaComando */
            {
                ArrayList<Object> list = new43();
                push(goTo(16), list);
            }
            break;
            case 44: /* reduce AAavaliecomando1Comando */
            {
                ArrayList<Object> list = new44();
                push(goTo(16), list);
            }
            break;
            case 45: /* reduce AAavaliecomando2Comando */
            {
                ArrayList<Object> list = new45();
                push(goTo(16), list);
            }
            break;
            case 46: /* reduce AAavaliecomando3Comando */
            {
                ArrayList<Object> list = new46();
                push(goTo(16), list);
            }
            break;
            case 47: /* reduce AAavaliecomando4Comando */
            {
                ArrayList<Object> list = new47();
                push(goTo(16), list);
            }
            break;
            case 48: /* reduce AParaComando */
            {
                ArrayList<Object> list = new48();
                push(goTo(16), list);
            }
            break;
            case 49: /* reduce AParaPassoComando */
            {
                ArrayList<Object> list = new49();
                push(goTo(16), list);
            }
            break;
            case 50: /* reduce AAsecomando1Comando */
            {
                ArrayList<Object> list = new50();
                push(goTo(16), list);
            }
            break;
            case 51: /* reduce AAsecomando2Comando */
            {
                ArrayList<Object> list = new51();
                push(goTo(16), list);
            }
            break;
            case 52: /* reduce ARepitaComando */
            {
                ArrayList<Object> list = new52();
                push(goTo(16), list);
            }
            break;
            case 53: /* reduce AEnquantoComando */
            {
                ArrayList<Object> list = new53();
                push(goTo(16), list);
            }
            break;
            case 54: /* reduce ACasoStt */
            {
                ArrayList<Object> list = new54();
                push(goTo(17), list);
            }
            break;
            case 55: /* reduce ASenaoCasoStt */
            {
                ArrayList<Object> list = new55();
                push(goTo(18), list);
            }
            break;
            case 56: /* reduce ASenaoStatement */
            {
                ArrayList<Object> list = new56();
                push(goTo(19), list);
            }
            break;
            case 57: /* reduce ATerminal$Declaracao */
            {
                ArrayList<Object> list = new57();
                push(goTo(20), list);
            }
            break;
            case 58: /* reduce ANonTerminal$Declaracao */
            {
                ArrayList<Object> list = new58();
                push(goTo(20), list);
            }
            break;
            case 59: /* reduce ATerminal$Comando */
            {
                ArrayList<Object> list = new59();
                push(goTo(21), list);
            }
            break;
            case 60: /* reduce ANonTerminal$Comando */
            {
                ArrayList<Object> list = new60();
                push(goTo(21), list);
            }
            break;
            case 61: /* reduce ATerminal$CasoStt */
            {
                ArrayList<Object> list = new61();
                push(goTo(22), list);
            }
            break;
            case 62: /* reduce ANonTerminal$CasoStt */
            {
                ArrayList<Object> list = new62();
                push(goTo(22), list);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AAstart1Start */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStart pstartNode1;
        {
            // Block
        TId tidNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        tidNode2 = (TId)nodeArrayList2.get(0);
        {
            // Block
        }
        {
            // Block
        }

        pstartNode1 = new AStart(tidNode2, listNode3, listNode4);
        }
	nodeList.add(pstartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AAstart2Start */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStart pstartNode1;
        {
            // Block
        TId tidNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        tidNode2 = (TId)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList4.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        {
            // Block
        }

        pstartNode1 = new AStart(tidNode2, listNode4, listNode5);
        }
	nodeList.add(pstartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AAstart3Start */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStart pstartNode1;
        {
            // Block
        TId tidNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        tidNode2 = (TId)nodeArrayList2.get(0);
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList4.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pstartNode1 = new AStart(tidNode2, listNode3, listNode5);
        }
	nodeList.add(pstartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AAstart4Start */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStart pstartNode1;
        {
            // Block
        TId tidNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        tidNode2 = (TId)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList4.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList5.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pstartNode1 = new AStart(tidNode2, listNode4, listNode6);
        }
	nodeList.add(pstartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AIdIdentificador */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIdentificador pidentificadorNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        pidentificadorNode1 = new AIdIdentificador(tidNode2);
        }
	nodeList.add(pidentificadorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AIdVarIdentificador */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIdentificador pidentificadorNode1;
        {
            // Block
        TId tidNode2;
        TColD tcoldNode3;
        TNumber tnumberNode4;
        TColE tcoleNode5;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tcoldNode3 = (TColD)nodeArrayList2.get(0);
        tnumberNode4 = (TNumber)nodeArrayList3.get(0);
        tcoleNode5 = (TColE)nodeArrayList4.get(0);

        pidentificadorNode1 = new AIdVarIdentificador(tidNode2, tcoldNode3, tnumberNode4, tcoleNode5);
        }
	nodeList.add(pidentificadorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AIdVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVar pvarNode1;
        {
            // Block
        PIdentificador pidentificadorNode2;
        PVarTail pvartailNode3;
        pidentificadorNode2 = (PIdentificador)nodeArrayList1.get(0);
        pvartailNode3 = (PVarTail)nodeArrayList2.get(0);

        pvarNode1 = new AIdVar(pidentificadorNode2, pvartailNode3);
        }
	nodeList.add(pvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce ATailVarTail */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVarTail pvartailNode1;
        {
            // Block
        TVirgula tvirgulaNode2;
        PVar pvarNode3;
        tvirgulaNode2 = (TVirgula)nodeArrayList1.get(0);
        pvarNode3 = (PVar)nodeArrayList2.get(0);

        pvartailNode1 = new ATailVarTail(tvirgulaNode2, pvarNode3);
        }
	nodeList.add(pvartailNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce AEmptyVarTail */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PVarTail pvartailNode1;
        {
            // Block

        pvartailNode1 = new AEmptyVarTail();
        }
	nodeList.add(pvartailNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AStringValor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValor pvalorNode1;
        {
            // Block
        TString tstringNode2;
        tstringNode2 = (TString)nodeArrayList1.get(0);

        pvalorNode1 = new AStringValor(tstringNode2);
        }
	nodeList.add(pvalorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce ANumberValor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValor pvalorNode1;
        {
            // Block
        TNumber tnumberNode2;
        tnumberNode2 = (TNumber)nodeArrayList1.get(0);

        pvalorNode1 = new ANumberValor(tnumberNode2);
        }
	nodeList.add(pvalorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce ANumberRealValor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValor pvalorNode1;
        {
            // Block
        TNumberReal tnumberrealNode2;
        tnumberrealNode2 = (TNumberReal)nodeArrayList1.get(0);

        pvalorNode1 = new ANumberRealValor(tnumberrealNode2);
        }
	nodeList.add(pvalorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce ADeclarDeclaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaracao pdeclaracaoNode1;
        {
            // Block
        TTipo ttipoNode2;
        PVar pvarNode3;
        ttipoNode2 = (TTipo)nodeArrayList1.get(0);
        pvarNode3 = (PVar)nodeArrayList3.get(0);

        pdeclaracaoNode1 = new ADeclarDeclaracao(ttipoNode2, pvarNode3);
        }
	nodeList.add(pdeclaracaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce AMaisExpressao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressao pexpressaoNode1;
        {
            // Block
        PExpressao pexpressaoNode2;
        PExpressao pexpressaoNode3;
        pexpressaoNode2 = (PExpressao)nodeArrayList1.get(0);
        pexpressaoNode3 = (PExpressao)nodeArrayList3.get(0);

        pexpressaoNode1 = new AMaisExpressao(pexpressaoNode2, pexpressaoNode3);
        }
	nodeList.add(pexpressaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AMenosExpressao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressao pexpressaoNode1;
        {
            // Block
        PExpressao pexpressaoNode2;
        PExpressao pexpressaoNode3;
        pexpressaoNode2 = (PExpressao)nodeArrayList1.get(0);
        pexpressaoNode3 = (PExpressao)nodeArrayList3.get(0);

        pexpressaoNode1 = new AMenosExpressao(pexpressaoNode2, pexpressaoNode3);
        }
	nodeList.add(pexpressaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce ANegacaoExpressao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressao pexpressaoNode1;
        {
            // Block
        PExpressao pexpressaoNode2;
        pexpressaoNode2 = (PExpressao)nodeArrayList2.get(0);

        pexpressaoNode1 = new ANegacaoExpressao(pexpressaoNode2);
        }
	nodeList.add(pexpressaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce ATermoExpressao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressao pexpressaoNode1;
        pexpressaoNode1 = (PExpressao)nodeArrayList1.get(0);
	nodeList.add(pexpressaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AMulTermo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressao pexpressaoNode1;
        {
            // Block
        PExpressao pexpressaoNode2;
        PExpressao pexpressaoNode3;
        pexpressaoNode2 = (PExpressao)nodeArrayList1.get(0);
        pexpressaoNode3 = (PExpressao)nodeArrayList3.get(0);

        pexpressaoNode1 = new AMulExpressao(pexpressaoNode2, pexpressaoNode3);
        }
	nodeList.add(pexpressaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce ADivTermo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressao pexpressaoNode1;
        {
            // Block
        PExpressao pexpressaoNode2;
        PExpressao pexpressaoNode3;
        pexpressaoNode2 = (PExpressao)nodeArrayList1.get(0);
        pexpressaoNode3 = (PExpressao)nodeArrayList3.get(0);

        pexpressaoNode1 = new ADivExpressao(pexpressaoNode2, pexpressaoNode3);
        }
	nodeList.add(pexpressaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AFatorTermo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressao pexpressaoNode1;
        pexpressaoNode1 = (PExpressao)nodeArrayList1.get(0);
	nodeList.add(pexpressaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AValorFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressao pexpressaoNode1;
        {
            // Block
        PValor pvalorNode2;
        pvalorNode2 = (PValor)nodeArrayList1.get(0);

        pexpressaoNode1 = new AValorExpressao(pvalorNode2);
        }
	nodeList.add(pexpressaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AIdFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressao pexpressaoNode1;
        {
            // Block
        PIdentificador pidentificadorNode2;
        pidentificadorNode2 = (PIdentificador)nodeArrayList1.get(0);

        pexpressaoNode1 = new AIdExpressao(pidentificadorNode2);
        }
	nodeList.add(pexpressaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce AParentesesFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressao pexpressaoNode1;
        {
            // Block
        PExpressao pexpressaoNode2;
        pexpressaoNode2 = (PExpressao)nodeArrayList2.get(0);

        pexpressaoNode1 = new AParentesesExpressao(pexpressaoNode2);
        }
	nodeList.add(pexpressaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce ALogicaExpressaoLogica */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressaoLogica pexpressaologicaNode1;
        {
            // Block
        PExpressaoLogica pexpressaologicaNode2;
        PExpressaoLogica pexpressaologicaNode3;
        pexpressaologicaNode2 = (PExpressaoLogica)nodeArrayList1.get(0);
        pexpressaologicaNode3 = (PExpressaoLogica)nodeArrayList3.get(0);

        pexpressaologicaNode1 = new ALogicaExpressaoLogica(pexpressaologicaNode2, pexpressaologicaNode3);
        }
	nodeList.add(pexpressaologicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce ANegacaoExpressaoLogica */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressaoLogica pexpressaologicaNode1;
        {
            // Block
        PExpressaoLogica pexpressaologicaNode2;
        pexpressaologicaNode2 = (PExpressaoLogica)nodeArrayList2.get(0);

        pexpressaologicaNode1 = new ANaoExpressaoLogica(pexpressaologicaNode2);
        }
	nodeList.add(pexpressaologicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce ATermoExpressaoLogica */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressaoLogica pexpressaologicaNode1;
        pexpressaologicaNode1 = (PExpressaoLogica)nodeArrayList1.get(0);
	nodeList.add(pexpressaologicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce ARelacionalTermoLogico */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressaoLogica pexpressaologicaNode1;
        pexpressaologicaNode1 = (PExpressaoLogica)nodeArrayList1.get(0);
	nodeList.add(pexpressaologicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce AOperacaoTermoLogico */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressaoLogica pexpressaologicaNode1;
        {
            // Block
        PExpressao pexpressaoNode2;
        PExpressao pexpressaoNode3;
        pexpressaoNode2 = (PExpressao)nodeArrayList1.get(0);
        pexpressaoNode3 = (PExpressao)nodeArrayList3.get(0);

        pexpressaologicaNode1 = new AOperacaoExpressaoLogica(pexpressaoNode2, pexpressaoNode3);
        }
	nodeList.add(pexpressaologicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce AParentesesFatorLogico */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressaoLogica pexpressaologicaNode1;
        {
            // Block
        PExpressaoLogica pexpressaologicaNode2;
        pexpressaologicaNode2 = (PExpressaoLogica)nodeArrayList2.get(0);

        pexpressaologicaNode1 = new AParentesesExpressaoLogica(pexpressaologicaNode2);
        }
	nodeList.add(pexpressaologicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce AIgualOpRel */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce ADiferenteOpRel */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce AMaiorOpRel */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce AMenorOpRel */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce AMaiorIgualOpRel */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce AMenorIgualOpRel */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce AEOpLog */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce AOuOpLog */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce AXorOpLog */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce AExpExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExpressao pexpressaoNode2;
        PExpTail pexptailNode3;
        pexpressaoNode2 = (PExpressao)nodeArrayList1.get(0);
        pexptailNode3 = (PExpTail)nodeArrayList2.get(0);

        pexpNode1 = new AExpExp(pexpressaoNode2, pexptailNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce ATailExpTail */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpTail pexptailNode1;
        {
            // Block
        TVirgula tvirgulaNode2;
        PExp pexpNode3;
        tvirgulaNode2 = (TVirgula)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList2.get(0);

        pexptailNode1 = new ATailExpTail(tvirgulaNode2, pexpNode3);
        }
	nodeList.add(pexptailNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce AEmptyExpTail */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PExpTail pexptailNode1;
        {
            // Block

        pexptailNode1 = new AEmptyExpTail();
        }
	nodeList.add(pexptailNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce AAtribuicaoComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PIdentificador pidentificadorNode2;
        PExpressao pexpressaoNode3;
        pidentificadorNode2 = (PIdentificador)nodeArrayList1.get(0);
        pexpressaoNode3 = (PExpressao)nodeArrayList3.get(0);

        pcomandoNode1 = new AAtribuicaoComando(pidentificadorNode2, pexpressaoNode3);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce AEscrevaComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList3.get(0);

        pcomandoNode1 = new AEscrevaComando(pexpNode2);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce ALeiaComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PVar pvarNode2;
        pvarNode2 = (PVar)nodeArrayList3.get(0);

        pcomandoNode1 = new ALeiaComando(pvarNode2);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce AAavaliecomando1Comando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PExpressao pexpressaoNode2;
        pexpressaoNode2 = (PExpressao)nodeArrayList3.get(0);

        pcomandoNode1 = new AAvalieComando(pexpressaoNode2);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce AAavaliecomando2Comando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PExpressao pexpressaoNode2;
        pexpressaoNode2 = (PExpressao)nodeArrayList3.get(0);

        pcomandoNode1 = new AAvalieComando(pexpressaoNode2);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce AAavaliecomando3Comando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PExpressao pexpressaoNode2;
        pexpressaoNode2 = (PExpressao)nodeArrayList3.get(0);

        pcomandoNode1 = new AAvalieComando(pexpressaoNode2);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce AAavaliecomando4Comando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PExpressao pexpressaoNode2;
        pexpressaoNode2 = (PExpressao)nodeArrayList3.get(0);

        pcomandoNode1 = new AAvalieComando(pexpressaoNode2);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce AParaComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PIdentificador pidentificadorNode2;
        pidentificadorNode2 = (PIdentificador)nodeArrayList2.get(0);

        pcomandoNode1 = new AParaComando(pidentificadorNode2);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce AParaPassoComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PIdentificador pidentificadorNode2;
        pidentificadorNode2 = (PIdentificador)nodeArrayList2.get(0);

        pcomandoNode1 = new AParaPassoComando(pidentificadorNode2);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce AAsecomando1Comando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PExpressaoLogica pexpressaologicaNode2;
        pexpressaologicaNode2 = (PExpressaoLogica)nodeArrayList3.get(0);

        pcomandoNode1 = new ASeComando(pexpressaologicaNode2);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce AAsecomando2Comando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PExpressaoLogica pexpressaologicaNode2;
        pexpressaologicaNode2 = (PExpressaoLogica)nodeArrayList3.get(0);

        pcomandoNode1 = new ASeComando(pexpressaologicaNode2);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce ARepitaComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PExpressaoLogica pexpressaologicaNode2;
        pexpressaologicaNode2 = (PExpressaoLogica)nodeArrayList5.get(0);

        pcomandoNode1 = new ARepitaComando(pexpressaologicaNode2);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce AEnquantoComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PExpressaoLogica pexpressaologicaNode2;
        pexpressaologicaNode2 = (PExpressaoLogica)nodeArrayList3.get(0);

        pcomandoNode1 = new AEnquantoComando(pexpressaologicaNode2);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce ACasoStt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce ASenaoCasoStt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce ASenaoStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce ATerminal$Declaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PDeclaracao pdeclaracaoNode1;
        pdeclaracaoNode1 = (PDeclaracao)nodeArrayList1.get(0);
	if(pdeclaracaoNode1 != null)
	{
	  listNode2.add(pdeclaracaoNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new58() /* reduce ANonTerminal$Declaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PDeclaracao pdeclaracaoNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pdeclaracaoNode2 = (PDeclaracao)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pdeclaracaoNode2 != null)
	{
	  listNode3.add(pdeclaracaoNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new59() /* reduce ATerminal$Comando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PComando pcomandoNode1;
        pcomandoNode1 = (PComando)nodeArrayList1.get(0);
	if(pcomandoNode1 != null)
	{
	  listNode2.add(pcomandoNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new60() /* reduce ANonTerminal$Comando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PComando pcomandoNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pcomandoNode2 = (PComando)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pcomandoNode2 != null)
	{
	  listNode3.add(pcomandoNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new61() /* reduce ATerminal$CasoStt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new62() /* reduce ANonTerminal$CasoStt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {0, SHIFT, 1}, },
			{{-1, ERROR, 1}, {45, SHIFT, 3}, },
			{{-1, ERROR, 2}, {54, ACCEPT, -1}, },
			{{-1, ERROR, 3}, {1, SHIFT, 4}, },
			{{-1, ERROR, 4}, {2, SHIFT, 5}, {3, SHIFT, 6}, {5, SHIFT, 7}, {9, SHIFT, 8}, {15, SHIFT, 9}, {16, SHIFT, 10}, {19, SHIFT, 11}, {39, SHIFT, 12}, {40, SHIFT, 13}, {45, SHIFT, 14}, },
			{{-1, REDUCE, 0}, },
			{{-1, ERROR, 6}, {24, SHIFT, 20}, },
			{{-1, ERROR, 7}, {24, SHIFT, 21}, },
			{{-1, ERROR, 8}, {45, SHIFT, 14}, },
			{{-1, ERROR, 9}, {3, SHIFT, 6}, {5, SHIFT, 7}, {9, SHIFT, 8}, {15, SHIFT, 9}, {16, SHIFT, 10}, {39, SHIFT, 12}, {40, SHIFT, 13}, {45, SHIFT, 14}, },
			{{-1, ERROR, 10}, {24, SHIFT, 24}, },
			{{-1, ERROR, 11}, {41, SHIFT, 25}, },
			{{-1, ERROR, 12}, {24, SHIFT, 26}, },
			{{-1, ERROR, 13}, {24, SHIFT, 27}, },
			{{-1, REDUCE, 4}, {26, SHIFT, 28}, },
			{{-1, ERROR, 15}, {38, SHIFT, 29}, },
			{{-1, REDUCE, 57}, },
			{{-1, REDUCE, 59}, },
			{{-1, ERROR, 18}, {2, SHIFT, 30}, {3, SHIFT, 6}, {5, SHIFT, 7}, {9, SHIFT, 8}, {15, SHIFT, 9}, {16, SHIFT, 10}, {19, SHIFT, 11}, {39, SHIFT, 12}, {40, SHIFT, 13}, {45, SHIFT, 14}, },
			{{-1, ERROR, 19}, {2, SHIFT, 33}, {3, SHIFT, 6}, {5, SHIFT, 7}, {9, SHIFT, 8}, {15, SHIFT, 9}, {16, SHIFT, 10}, {39, SHIFT, 12}, {40, SHIFT, 13}, {45, SHIFT, 14}, },
			{{-1, ERROR, 20}, {21, SHIFT, 35}, {24, SHIFT, 36}, {37, SHIFT, 37}, {45, SHIFT, 14}, {46, SHIFT, 38}, {47, SHIFT, 39}, {48, SHIFT, 40}, },
			{{-1, ERROR, 21}, {21, SHIFT, 35}, {24, SHIFT, 36}, {37, SHIFT, 37}, {45, SHIFT, 14}, {46, SHIFT, 38}, {47, SHIFT, 39}, {48, SHIFT, 40}, },
			{{-1, ERROR, 22}, {10, SHIFT, 50}, },
			{{-1, ERROR, 23}, {3, SHIFT, 6}, {5, SHIFT, 7}, {9, SHIFT, 8}, {13, SHIFT, 51}, {15, SHIFT, 9}, {16, SHIFT, 10}, {39, SHIFT, 12}, {40, SHIFT, 13}, {45, SHIFT, 14}, },
			{{-1, ERROR, 24}, {21, SHIFT, 35}, {24, SHIFT, 52}, {45, SHIFT, 14}, {46, SHIFT, 38}, {47, SHIFT, 39}, {48, SHIFT, 40}, },
			{{-1, ERROR, 25}, {45, SHIFT, 14}, },
			{{-1, ERROR, 26}, {21, SHIFT, 35}, {24, SHIFT, 52}, {45, SHIFT, 14}, {46, SHIFT, 38}, {47, SHIFT, 39}, {48, SHIFT, 40}, },
			{{-1, ERROR, 27}, {45, SHIFT, 14}, },
			{{-1, ERROR, 28}, {46, SHIFT, 59}, },
			{{-1, ERROR, 29}, {21, SHIFT, 35}, {24, SHIFT, 52}, {45, SHIFT, 14}, {46, SHIFT, 38}, {47, SHIFT, 39}, {48, SHIFT, 40}, },
			{{-1, REDUCE, 1}, },
			{{-1, REDUCE, 58}, },
			{{-1, ERROR, 32}, {2, SHIFT, 61}, {3, SHIFT, 6}, {5, SHIFT, 7}, {9, SHIFT, 8}, {15, SHIFT, 9}, {16, SHIFT, 10}, {39, SHIFT, 12}, {40, SHIFT, 13}, {45, SHIFT, 14}, },
			{{-1, REDUCE, 2}, },
			{{-1, REDUCE, 60}, },
			{{-1, ERROR, 35}, {21, SHIFT, 35}, {24, SHIFT, 52}, {45, SHIFT, 14}, {46, SHIFT, 38}, {47, SHIFT, 39}, {48, SHIFT, 40}, },
			{{-1, ERROR, 36}, {21, SHIFT, 35}, {24, SHIFT, 36}, {37, SHIFT, 37}, {45, SHIFT, 14}, {46, SHIFT, 38}, {47, SHIFT, 39}, {48, SHIFT, 40}, },
			{{-1, ERROR, 37}, {21, SHIFT, 35}, {24, SHIFT, 36}, {37, SHIFT, 37}, {45, SHIFT, 14}, {46, SHIFT, 38}, {47, SHIFT, 39}, {48, SHIFT, 40}, },
			{{-1, REDUCE, 10}, },
			{{-1, REDUCE, 11}, },
			{{-1, REDUCE, 9}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 20}, },
			{{-1, ERROR, 43}, {28, SHIFT, 66}, {29, SHIFT, 67}, {30, SHIFT, 68}, {31, SHIFT, 69}, {32, SHIFT, 70}, {33, SHIFT, 71}, },
			{{-1, REDUCE, 16}, {20, SHIFT, 73}, {21, SHIFT, 74}, },
			{{-1, REDUCE, 19}, {22, SHIFT, 75}, {23, SHIFT, 76}, },
			{{-1, ERROR, 46}, {25, SHIFT, 77}, },
			{{-1, REDUCE, 25}, {34, SHIFT, 78}, {35, SHIFT, 79}, {36, SHIFT, 80}, },
			{{-1, REDUCE, 26}, },
			{{-1, ERROR, 49}, {25, SHIFT, 82}, },
			{{-1, ERROR, 50}, {46, SHIFT, 83}, },
			{{-1, ERROR, 51}, {24, SHIFT, 84}, },
			{{-1, ERROR, 52}, {21, SHIFT, 35}, {24, SHIFT, 52}, {45, SHIFT, 14}, {46, SHIFT, 38}, {47, SHIFT, 39}, {48, SHIFT, 40}, },
			{{-1, ERROR, 53}, {25, SHIFT, 86}, },
			{{-1, REDUCE, 8}, {44, SHIFT, 87}, },
			{{-1, ERROR, 55}, {42, SHIFT, 89}, },
			{{-1, REDUCE, 40}, {44, SHIFT, 90}, },
			{{-1, ERROR, 57}, {25, SHIFT, 92}, },
			{{-1, ERROR, 58}, {25, SHIFT, 93}, },
			{{-1, ERROR, 59}, {27, SHIFT, 94}, },
			{{-1, ERROR, 60}, {42, SHIFT, 95}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 15}, },
			{{-1, ERROR, 63}, {25, SHIFT, 96}, {28, SHIFT, 66}, {29, SHIFT, 67}, {30, SHIFT, 68}, {31, SHIFT, 69}, {32, SHIFT, 70}, {33, SHIFT, 71}, },
			{{-1, ERROR, 64}, {25, SHIFT, 97}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 29}, },
			{{-1, REDUCE, 30}, },
			{{-1, REDUCE, 31}, },
			{{-1, REDUCE, 32}, },
			{{-1, REDUCE, 34}, },
			{{-1, REDUCE, 33}, },
			{{-1, ERROR, 72}, {21, SHIFT, 35}, {24, SHIFT, 52}, {45, SHIFT, 14}, {46, SHIFT, 38}, {47, SHIFT, 39}, {48, SHIFT, 40}, },
			{{-1, ERROR, 73}, {21, SHIFT, 35}, {24, SHIFT, 52}, {45, SHIFT, 14}, {46, SHIFT, 38}, {47, SHIFT, 39}, {48, SHIFT, 40}, },
			{{-1, ERROR, 74}, {21, SHIFT, 35}, {24, SHIFT, 52}, {45, SHIFT, 14}, {46, SHIFT, 38}, {47, SHIFT, 39}, {48, SHIFT, 40}, },
			{{-1, ERROR, 75}, {24, SHIFT, 52}, {45, SHIFT, 14}, {46, SHIFT, 38}, {47, SHIFT, 39}, {48, SHIFT, 40}, },
			{{-1, ERROR, 76}, {24, SHIFT, 52}, {45, SHIFT, 14}, {46, SHIFT, 38}, {47, SHIFT, 39}, {48, SHIFT, 40}, },
			{{-1, ERROR, 77}, {14, SHIFT, 103}, },
			{{-1, REDUCE, 35}, },
			{{-1, REDUCE, 36}, },
			{{-1, REDUCE, 37}, },
			{{-1, ERROR, 81}, {21, SHIFT, 35}, {24, SHIFT, 36}, {37, SHIFT, 37}, {45, SHIFT, 14}, {46, SHIFT, 38}, {47, SHIFT, 39}, {48, SHIFT, 40}, },
			{{-1, ERROR, 82}, {6, SHIFT, 105}, },
			{{-1, ERROR, 83}, {11, SHIFT, 106}, {13, SHIFT, 107}, },
			{{-1, ERROR, 84}, {21, SHIFT, 35}, {24, SHIFT, 36}, {37, SHIFT, 37}, {45, SHIFT, 14}, {46, SHIFT, 38}, {47, SHIFT, 39}, {48, SHIFT, 40}, },
			{{-1, ERROR, 85}, {25, SHIFT, 96}, },
			{{-1, ERROR, 86}, {7, SHIFT, 109}, {17, SHIFT, 110}, {18, SHIFT, 111}, },
			{{-1, ERROR, 87}, {45, SHIFT, 14}, },
			{{-1, REDUCE, 6}, },
			{{-1, REDUCE, 12}, },
			{{-1, ERROR, 90}, {21, SHIFT, 35}, {24, SHIFT, 52}, {45, SHIFT, 14}, {46, SHIFT, 38}, {47, SHIFT, 39}, {48, SHIFT, 40}, },
			{{-1, REDUCE, 38}, },
			{{-1, ERROR, 92}, {42, SHIFT, 117}, },
			{{-1, ERROR, 93}, {42, SHIFT, 118}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 41}, },
			{{-1, REDUCE, 22}, },
			{{-1, REDUCE, 28}, },
			{{-1, REDUCE, 27}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 18}, },
			{{-1, REDUCE, 17}, },
			{{-1, ERROR, 103}, {3, SHIFT, 6}, {5, SHIFT, 7}, {9, SHIFT, 8}, {15, SHIFT, 9}, {16, SHIFT, 10}, {39, SHIFT, 12}, {40, SHIFT, 13}, {45, SHIFT, 14}, },
			{{-1, REDUCE, 23}, },
			{{-1, ERROR, 105}, {3, SHIFT, 6}, {5, SHIFT, 7}, {9, SHIFT, 8}, {15, SHIFT, 9}, {16, SHIFT, 10}, {39, SHIFT, 12}, {40, SHIFT, 13}, {45, SHIFT, 14}, },
			{{-1, ERROR, 106}, {46, SHIFT, 121}, },
			{{-1, ERROR, 107}, {46, SHIFT, 122}, },
			{{-1, ERROR, 108}, {25, SHIFT, 123}, },
			{{-1, ERROR, 109}, {41, SHIFT, 124}, },
			{{-1, ERROR, 110}, {46, SHIFT, 38}, {47, SHIFT, 39}, {48, SHIFT, 40}, },
			{{-1, ERROR, 111}, {42, SHIFT, 126}, },
			{{-1, REDUCE, 61}, },
			{{-1, ERROR, 113}, {18, SHIFT, 127}, },
			{{-1, ERROR, 114}, {7, SHIFT, 109}, {17, SHIFT, 110}, {18, SHIFT, 128}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 39}, },
			{{-1, REDUCE, 42}, },
			{{-1, REDUCE, 43}, },
			{{-1, ERROR, 119}, {3, SHIFT, 6}, {4, SHIFT, 131}, {5, SHIFT, 7}, {9, SHIFT, 8}, {15, SHIFT, 9}, {16, SHIFT, 10}, {39, SHIFT, 12}, {40, SHIFT, 13}, {45, SHIFT, 14}, },
			{{-1, ERROR, 120}, {3, SHIFT, 6}, {5, SHIFT, 7}, {7, SHIFT, 132}, {8, SHIFT, 133}, {9, SHIFT, 8}, {15, SHIFT, 9}, {16, SHIFT, 10}, {39, SHIFT, 12}, {40, SHIFT, 13}, {45, SHIFT, 14}, },
			{{-1, ERROR, 121}, {13, SHIFT, 135}, },
			{{-1, ERROR, 122}, {14, SHIFT, 136}, },
			{{-1, ERROR, 123}, {42, SHIFT, 137}, },
			{{-1, ERROR, 124}, {3, SHIFT, 6}, {5, SHIFT, 7}, {9, SHIFT, 8}, {15, SHIFT, 9}, {16, SHIFT, 10}, {39, SHIFT, 12}, {40, SHIFT, 13}, {45, SHIFT, 14}, },
			{{-1, ERROR, 125}, {41, SHIFT, 139}, },
			{{-1, REDUCE, 44}, },
			{{-1, ERROR, 127}, {42, SHIFT, 140}, },
			{{-1, ERROR, 128}, {42, SHIFT, 141}, },
			{{-1, REDUCE, 62}, },
			{{-1, ERROR, 130}, {18, SHIFT, 142}, },
			{{-1, ERROR, 131}, {42, SHIFT, 143}, },
			{{-1, ERROR, 132}, {3, SHIFT, 6}, {5, SHIFT, 7}, {9, SHIFT, 8}, {15, SHIFT, 9}, {16, SHIFT, 10}, {39, SHIFT, 12}, {40, SHIFT, 13}, {45, SHIFT, 14}, },
			{{-1, ERROR, 133}, {42, SHIFT, 145}, },
			{{-1, ERROR, 134}, {8, SHIFT, 146}, },
			{{-1, ERROR, 135}, {46, SHIFT, 147}, },
			{{-1, ERROR, 136}, {3, SHIFT, 6}, {5, SHIFT, 7}, {9, SHIFT, 8}, {15, SHIFT, 9}, {16, SHIFT, 10}, {39, SHIFT, 12}, {40, SHIFT, 13}, {45, SHIFT, 14}, },
			{{-1, REDUCE, 52}, },
			{{-1, REDUCE, 55}, {3, SHIFT, 6}, {5, SHIFT, 7}, {9, SHIFT, 8}, {15, SHIFT, 9}, {16, SHIFT, 10}, {39, SHIFT, 12}, {40, SHIFT, 13}, {45, SHIFT, 14}, },
			{{-1, ERROR, 139}, {3, SHIFT, 6}, {5, SHIFT, 7}, {9, SHIFT, 8}, {15, SHIFT, 9}, {16, SHIFT, 10}, {39, SHIFT, 12}, {40, SHIFT, 13}, {45, SHIFT, 14}, },
			{{-1, REDUCE, 46}, },
			{{-1, REDUCE, 45}, },
			{{-1, ERROR, 142}, {42, SHIFT, 150}, },
			{{-1, REDUCE, 53}, },
			{{-1, REDUCE, 56}, {3, SHIFT, 6}, {5, SHIFT, 7}, {9, SHIFT, 8}, {15, SHIFT, 9}, {16, SHIFT, 10}, {39, SHIFT, 12}, {40, SHIFT, 13}, {45, SHIFT, 14}, },
			{{-1, REDUCE, 50}, },
			{{-1, ERROR, 146}, {42, SHIFT, 151}, },
			{{-1, ERROR, 147}, {14, SHIFT, 152}, },
			{{-1, ERROR, 148}, {3, SHIFT, 6}, {5, SHIFT, 7}, {9, SHIFT, 8}, {12, SHIFT, 153}, {15, SHIFT, 9}, {16, SHIFT, 10}, {39, SHIFT, 12}, {40, SHIFT, 13}, {45, SHIFT, 14}, },
			{{-1, REDUCE, 54}, {3, SHIFT, 6}, {5, SHIFT, 7}, {9, SHIFT, 8}, {15, SHIFT, 9}, {16, SHIFT, 10}, {39, SHIFT, 12}, {40, SHIFT, 13}, {45, SHIFT, 14}, },
			{{-1, REDUCE, 47}, },
			{{-1, REDUCE, 51}, },
			{{-1, ERROR, 152}, {3, SHIFT, 6}, {5, SHIFT, 7}, {9, SHIFT, 8}, {15, SHIFT, 9}, {16, SHIFT, 10}, {39, SHIFT, 12}, {40, SHIFT, 13}, {45, SHIFT, 14}, },
			{{-1, ERROR, 153}, {42, SHIFT, 155}, },
			{{-1, ERROR, 154}, {3, SHIFT, 6}, {5, SHIFT, 7}, {9, SHIFT, 8}, {12, SHIFT, 156}, {15, SHIFT, 9}, {16, SHIFT, 10}, {39, SHIFT, 12}, {40, SHIFT, 13}, {45, SHIFT, 14}, },
			{{-1, REDUCE, 48}, },
			{{-1, ERROR, 156}, {42, SHIFT, 157}, },
			{{-1, REDUCE, 49}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 15}, {8, 22}, {20, 41}, {21, 41}, {24, 41}, {25, 54}, {26, 41}, {27, 54}, {29, 41}, {35, 41}, {36, 41}, {37, 41}, {52, 41}, {72, 41}, {73, 41}, {74, 41}, {75, 41}, {76, 41}, {81, 41}, {84, 41}, {87, 54}, {90, 41}, },
			{{-1, 55}, {27, 58}, {87, 115}, },
			{{-1, 88}, },
			{{-1, 42}, {110, 125}, },
			{{-1, 16}, {18, 31}, },
			{{-1, 43}, {24, 53}, {26, 56}, {29, 60}, {35, 62}, {36, 63}, {52, 85}, {72, 98}, {73, 99}, {74, 100}, {90, 56}, },
			{{-1, 44}, {75, 101}, {76, 102}, },
			{{-1, 45}, },
			{{-1, 46}, {21, 49}, {36, 64}, {37, 65}, {81, 104}, {84, 108}, },
			{{-1, 47}, },
			{{-1, 48}, },
			{{-1, 72}, },
			{{-1, 81}, },
			{{-1, 57}, {90, 116}, },
			{{-1, 91}, },
			{{-1, 17}, {19, 34}, {23, 34}, {32, 34}, {119, 34}, {120, 34}, {138, 34}, {144, 34}, {148, 34}, {149, 34}, {154, 34}, },
			{{-1, 112}, {114, 129}, },
			{{-1, 113}, {114, 130}, },
			{{-1, 134}, },
			{{-1, 18}, },
			{{-1, 19}, {9, 23}, {18, 32}, {103, 119}, {105, 120}, {124, 138}, {132, 144}, {136, 148}, {139, 149}, {152, 154}, },
			{{-1, 114}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'programa'",
			"expecting: id",
			"expecting: EOF",
			"expecting: 'inicio'",
			"expecting: 'fim.', 'enquanto', 'se', 'para', 'repita', 'avalie', tipo, 'escreva', 'leia', id",
			"expecting: '('",
			"expecting: 'enquanto', 'se', 'para', 'repita', 'avalie', 'escreva', 'leia', id",
			"expecting: ':'",
			"expecting: 'de', '+', '-', '/', '*', ')', '[', '=', '<>', '>', '<', '<=', '>=', 'e', 'ou', 'xor', ':=', ';', ','",
			"expecting: ':='",
			"expecting: 'fim.', 'enquanto', 'fim enquanto', 'se', 'senao', 'fim se', 'para', 'fim para', 'ate', 'repita', 'avalie', 'caso', 'fim avalie', 'escreva', 'leia', id",
			"expecting: 'fim.', 'enquanto', 'se', 'para', 'repita', 'avalie', 'escreva', 'leia', id",
			"expecting: '-', '(', 'nao', id, number, number real, string",
			"expecting: 'de'",
			"expecting: 'enquanto', 'se', 'para', 'ate', 'repita', 'avalie', 'escreva', 'leia', id",
			"expecting: '-', '(', id, number, number real, string",
			"expecting: number",
			"expecting: '+', '-', '/', '*', ')', '=', '<>', '>', '<', '<=', '>=', 'e', 'ou', 'xor', ':', ';', ','",
			"expecting: '+', '-', '/', '*', ')', '=', '<>', '>', '<', '<=', '>=', 'e', 'ou', 'xor', ';', ','",
			"expecting: '=', '<>', '>', '<', '<=', '>='",
			"expecting: '+', '-', ')', '=', '<>', '>', '<', '<=', '>=', 'e', 'ou', 'xor', ';', ','",
			"expecting: ')'",
			"expecting: ')', 'e', 'ou', 'xor'",
			"expecting: ')', ';', ','",
			"expecting: ';'",
			"expecting: ')', ','",
			"expecting: ']'",
			"expecting: ')', '=', '<>', '>', '<', '<=', '>=', 'e', 'ou', 'xor', ';', ','",
			"expecting: ')', '=', '<>', '>', '<', '<=', '>='",
			"expecting: '(', id, number, number real, string",
			"expecting: 'faca'",
			"expecting: 'entao'",
			"expecting: 'passo', 'ate'",
			"expecting: 'senao', 'caso', 'fim avalie'",
			"expecting: ')', ';'",
			"expecting: 'de', '+', '-', '/', '*', ')', '=', '<>', '>', '<', '<=', '>=', 'e', 'ou', 'xor', ':=', ';', ','",
			"expecting: number, number real, string",
			"expecting: 'fim avalie'",
			"expecting: 'enquanto', 'fim enquanto', 'se', 'para', 'repita', 'avalie', 'escreva', 'leia', id",
			"expecting: 'enquanto', 'se', 'senao', 'fim se', 'para', 'repita', 'avalie', 'escreva', 'leia', id",
			"expecting: 'ate'",
			"expecting: 'fim se'",
			"expecting: 'enquanto', 'se', 'para', 'repita', 'avalie', 'fim avalie', 'escreva', 'leia', id",
			"expecting: 'enquanto', 'se', 'fim se', 'para', 'repita', 'avalie', 'escreva', 'leia', id",
			"expecting: 'enquanto', 'se', 'para', 'fim para', 'repita', 'avalie', 'escreva', 'leia', id",
			"expecting: 'enquanto', 'se', 'senao', 'para', 'repita', 'avalie', 'caso', 'fim avalie', 'escreva', 'leia', id",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 4, 2, 5, 5, 1, 6, 5, 7, 5, 5, 8, 9, 4, 10, 4, 11, 12, 12, 13, 14, 15, 1, 15, 1, 16, 15, 2, 4, 11, 2, 10, 15, 12, 12, 17, 17, 17, 18, 18, 19, 20, 18, 21, 22, 22, 21, 16, 5, 15, 21, 23, 24, 25, 21, 21, 26, 24, 2, 27, 28, 21, 21, 15, 15, 15, 15, 15, 15, 15, 15, 15, 29, 29, 30, 12, 12, 12, 12, 31, 32, 12, 21, 33, 1, 34, 4, 15, 21, 24, 24, 35, 10, 18, 22, 22, 27, 27, 20, 20, 6, 21, 6, 16, 16, 21, 7, 36, 24, 33, 37, 33, 34, 21, 10, 10, 38, 39, 40, 30, 24, 6, 7, 10, 24, 24, 33, 37, 24, 6, 24, 41, 16, 6, 10, 42, 6, 10, 10, 24, 10, 43, 10, 24, 30, 44, 45, 10, 10, 6, 24, 44, 10, 24, 10, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
